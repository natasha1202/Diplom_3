{"name": "Проверка кнопки закрыть окно с детальным описанием ингредиента", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: Element <a class=\"BurgerIngredient_ingredient__1TVf6 ml-4 mr-4 mb-8\" href=\"/ingredient/61c0c5a71d1f82001bdaaa74\"> is not clickable at point (160,603) because another element <div class=\"Modal_modal_overlay__x2ZCr\"> obscures it\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:337:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:176:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:135:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:204:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:84:31", "trace": "self = <tests.test_constructor.TestConstructor object at 0x0000024384942F60>, request = <FixtureRequest for <Function test_close_popup_ingredient_details[firefox_driver]>>\nbr_driver = 'firefox_driver'\n\n    @allure.title('Проверка кнопки закрыть окно с детальным описанием ингредиента')\n    @allure.description('Пользователь находится на главной странице, кликает по произвольному ингредиенту. '\n                        'Открывается окно с детальным описанием ингредиента. '\n                        'Пользователь кликает на крестик и окно закрывается.')\n    @pytest.mark.parametrize('br_driver',\n                             ['chrome_driver', 'firefox_driver'])\n    def test_close_popup_ingredient_details(self,request, br_driver):\n        driver = request.getfixturevalue(br_driver)\n        main_page = MainPage(driver)\n        constructor_page = ConstructorPage(driver)\n        main_page.open_main_page()\n    \n        ingredient = constructor_page.choose_any_ingredient_from_list()\n>       ingredient.click()\n\ntests\\test_constructor.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\natasha\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\natasha\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\natasha\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024384A13170>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <a class=\\\\\"BurgerIngredien...sys.mjs:204:29\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:84:31\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <a class=\"BurgerIngredient_ingredient__1TVf6 ml-4 mr-4 mb-8\" href=\"/ingredient/61c0c5a71d1f82001bdaaa74\"> is not clickable at point (160,603) because another element <div class=\"Modal_modal_overlay__x2ZCr\"> obscures it\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nE       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:337:5\nE       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:176:11\nE       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:135:11\nE       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:204:29\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:84:31\n\nC:\\Users\\natasha\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "description": "Пользователь находится на главной странице, кликает по произвольному ингредиенту. Открывается окно с детальным описанием ингредиента. Пользователь кликает на крестик и окно закрывается.", "steps": [{"name": "Открыть главную страницу", "status": "passed", "steps": [{"name": "Открыть страницу кликнув на элемент", "status": "passed", "steps": [{"name": "Перейти на страницу", "status": "passed", "parameters": [{"name": "url", "value": "'https://stellarburgers.nomoreparties.site/'"}], "start": 1714918486793, "stop": 1714918488129}, {"name": "Подождать", "status": "passed", "start": 1714918488231, "stop": 1714918488231}], "parameters": [{"name": "locator", "value": "('xpath', \".//h1[contains(text(),'Соберите бургер')]\")"}, {"name": "page_url", "value": "'https://stellarburgers.nomoreparties.site/'"}, {"name": "page", "value": "<page_object.pages.main_page.MainPage object at 0x0000024384A12420>"}], "start": 1714918486793, "stop": 1714918488231}], "start": 1714918486792, "stop": 1714918488231}, {"name": "Выбор произвольного ингрелиента", "status": "passed", "start": 1714918488231, "stop": 1714918488248}], "parameters": [{"name": "br_driver", "value": "'firefox_driver'"}], "start": 1714918480843, "stop": 1714918488279, "uuid": "d9141ec3-f343-478d-ad9b-a4ae781ca3f6", "historyId": "8248a892e6e2159d5d65a745d9d18e8f", "testCaseId": "0aed35581d956b9a76b30f5216d2a6f9", "fullName": "tests.test_constructor.TestConstructor#test_close_popup_ingredient_details", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_constructor"}, {"name": "subSuite", "value": "TestConstructor"}, {"name": "host", "value": "LAPTOP-IE2IJGHD"}, {"name": "thread", "value": "8976-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_constructor"}]}